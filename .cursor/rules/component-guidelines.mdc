---
description: 
globs: 
alwaysApply: false
---
# Component Development Guidelines

## Component Organization

- Place all components in the `components/` directory
- Group related components in feature-specific subdirectories
- Base UI components should be in `components/ui/`
- Use TypeScript for all components

## Component Structure

1. Use functional components with TypeScript interfaces for props
2. Implement proper prop validation using TypeScript
3. Use React Hook Form for form handling
4. Implement proper error handling and loading states
5. Use Radix UI primitives for accessible components

## Styling Guidelines

- Use Tailwind CSS for styling
- Follow the project's design system
- Use CSS modules for component-specific styles
- Implement responsive design using Tailwind breakpoints
- Use the theme system for dark/light mode support

## Best Practices

1. Keep components small and focused
2. Use proper TypeScript types
3. Implement proper error boundaries
4. Use React.memo() for performance optimization when needed
5. Follow the single responsibility principle
6. Use proper naming conventions:
   - PascalCase for component files and names
   - camelCase for props and variables
   - kebab-case for CSS classes

## State Management

- Use React hooks for local state
- Use context for global state when needed
- Implement proper loading and error states
- Use proper data fetching patterns

## Accessibility

- Use semantic HTML elements
- Implement proper ARIA attributes
- Ensure keyboard navigation works
- Use Radix UI components for accessible UI elements
- Test with screen readers

## Performance

- Implement proper code splitting
- Use proper image optimization
- Implement proper caching strategies
- Use proper lazy loading when needed
- Monitor and optimize bundle size

- Do Not Write Comments
- Do Not use HardCoded Colors
- If you are not sure, stop and ask
- Use PNPM please

