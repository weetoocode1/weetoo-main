# Cursor Rules for Weetoo Company Project

## Code Quality & Documentation

### Avoid Unhelpful Inline Comments

- **DO NOT** add comments that simply restate what the code does
- **DO NOT** add comments like "// increment counter" when you have `counter++`
- **DO NOT** add comments like "// check if user exists" when you have `if (userExists)`
- **DO NOT** add comments like "// loop through items" when you have `items.forEach()`

### Prefer Descriptive Naming Over Comments

- Use descriptive variable names: `userAuthenticationStatus` instead of `status` with a comment
- Use descriptive function names: `validateUserCredentials()` instead of `validate()` with a comment
- Use descriptive constant names: `MAX_RETRY_ATTEMPTS` instead of `MAX_RETRIES` with a comment
- Use descriptive boolean names: `isUserAuthenticated` instead of `isAuth` with a comment

### When Comments ARE Necessary

- **DO** add comments for complex business logic that isn't obvious from the code
- **DO** add comments for workarounds or non-obvious solutions
- **DO** add comments for API endpoints that have specific requirements
- **DO** add comments for complex algorithms or mathematical calculations
- **DO** add JSDoc comments for public functions and complex private functions

### Examples of Good vs Bad Comments

❌ **BAD - Unhelpful:**

```typescript
// increment the counter
counter++;

// check if user exists
if (userExists) {
  // do something
}

// loop through posts
posts.forEach((post) => {
  // process post
});
```

✅ **GOOD - Descriptive naming:**

```typescript
userPostCount++;

if (userProfileExists) {
  displayUserProfile();
}

posts.forEach(processPost);
```

✅ **GOOD - Necessary comments:**

```typescript
// Workaround for Safari's incomplete WebRTC implementation
// See: https://bugs.webkit.org/show_bug.cgi?id=230902
if (isSafari && !supportsWebRTC) {
  fallbackToAlternativeMethod();
}

/**
 * Calculates the Fibonacci sequence using dynamic programming
 * Time complexity: O(n), Space complexity: O(1)
 */
function calculateFibonacci(n: number): number {
  // Implementation details...
}
```

### Code Style Guidelines

- Keep functions small and focused (max 20-30 lines)
- Use early returns to reduce nesting
- Extract complex logic into well-named helper functions
- Use TypeScript types and interfaces to make code self-documenting
- Prefer composition over inheritance

### File Organization

- Group related functions together
- Use clear section headers with `// ===== SECTION NAME =====` for large files
- Keep imports organized and grouped logically
- Use consistent naming conventions across the project

Remember: **Code should be self-documenting through clear naming and structure. Comments should explain WHY, not WHAT.**
